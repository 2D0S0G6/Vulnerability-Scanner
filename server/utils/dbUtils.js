const mysql = require('mysql2');

// Create a MySQL connection pool
const pool = mysql.createPool({
    host: 'localhost',
    user: 'root',
    password: 'password',
    database: 'api',
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0
});

// Export functions
module.exports = {
    // Execute a SQL query with parameters
    query: (sql, params = []) => {
        return new Promise((resolve, reject) => {
            pool.query(sql, params, (err, results) => {
                if (err) reject(err);
                resolve(results);
            });
        });
    },

    // Create Table
    createTable: async (tableName, schema) => {
        const tableExistsQuery = `SHOW TABLES LIKE '${tableName}'`;
        const [existingTables] = await query(tableExistsQuery);
    
        if (existingTables.length === 0) {
            const columns = Object.entries(schema).map(([columnName, columnDefinition]) => {
                return `${columnName} ${columnDefinition}`;
            }).join(',');
    
            const createTableQuery = `CREATE TABLE IF NOT EXISTS ${tableName} (${columns})`;
            await query(createTableQuery);
            console.log(`Table '${tableName}' created successfully.`);
        } else {
            console.log(`Table '${tableName}' already exists.`);
        }
    },

    deleteTable: async (tableName) => {
        const tableExistsQuery = `SHOW TABLES LIKE '${tableName}'`;
        const [existingTables] = await query(tableExistsQuery);
    
        if (existingTables.length > 0) {
            const deleteTableQuery = `DROP TABLE ${tableName}`;
            await query(deleteTableQuery);
            console.log(`Table '${tableName}' deleted successfully.`);
        } else {
            console.log(`Table '${tableName}' does not exist.`);
        }
    },

    // Get a single row from a table by ID
    getById: async (tableName, id) => {
        const [rows] = await pool.query(`SELECT * FROM ${tableName} WHERE id = ?`, [id]);
        return rows[0];
    },

    // Insert into a table
    insert: async (tableName, data) => {
        const keys = Object.keys(data[0]);
        const placeholders = data.map(() => `(${keys.map(() => '?').join(',')})`).join(',');
        const values = data.reduce((acc, obj) => {
            Object.values(obj).forEach(val => acc.push(val));
            return acc;
        }, []);

        const insertQuery = `INSERT INTO ${tableName} (${keys.join(',')}) VALUES ${placeholders}`;
        const [result] = await query(insertQuery, values);
        return result.insertId;
    },

    // Update a record in a table by ID
    updateById: async (tableName, id, data) => {
        await pool.query(`UPDATE ${tableName} SET ? WHERE id = ?`, [data, id]);
        return id;
    },

    // Delete a record from a table by ID
    deleteById: async (tableName, id) => {
        await pool.query(`DELETE FROM ${tableName} WHERE id = ?`, [id]);
        return id;
    }
};
