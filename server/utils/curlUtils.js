const { execFile } = require('child_process');
const path = require('path');
const { readFileToArray } = require('../utils/fileUtils');

// cURL request
function curlRequest(url, options = {}) {
    // Using promise to handle errors
    return new Promise((resolve, reject) => {
        const { method = 'GET', headers = {}, data = '', silent = false, responseCode = false } = options;

        let command = ['curl', '-X', method.toUpperCase(), url];

        // Adding custom headers
        for (const [header, value] of Object.entries(headers)) {
            command.push('-H', `${header}: ${value}`);
        }

        // Adding data for POST
        if (data) {
            command.push('-d', `"${data}"`);
        }

        // To sent in silent mode
        if (silent) {
            command.push('-s');
        }

        // Add option to get response code
        if (responseCode) {
            command.push('-w', '%{http_code}', '-o', '/dev/null');
        }

        // Executing
        execFile(command[0], command.slice(1), (error, stdout) => {
            if (error) {
                reject(error);
                return;
            }
            const jsonResponse = { response: stdout.trim() };
            resolve(jsonResponse);
        });
    });
}

// To check path traversal
async function testPathTraversal(targetURL) {
    const filePath = path.join(__dirname, '/../payloads/Traversal.txt');
    const payloads = readFileToArray(filePath);

    // Loading payload
    for (const payload of payloads) {
        const url = targetURL + payload;
        // For testing sake logging the URL
        console.log(`Testing URL: ${url}`);
        try {
            const response = await curlRequest(url);
            console.log(`Response: ${response}`);
        } catch (error) {
            console.error(`Error sending request: ${error}`);
        }
    }
}

// Exporting
module.exports = {
    testPathTraversal,
    curlRequest
};
